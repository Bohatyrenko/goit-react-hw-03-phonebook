{"version":3,"sources":["helpers/filterContacts.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/ContactFilter/ContactFilter.js","App.js","index.js"],"names":["getFilteredContacts","contacts","filter","name","toLowerCase","includes","trim","ContactForm","onSetName","onAddContact","number","style","display","onSubmit","marginBottom","value","type","pattern","title","placeholder","required","onInput","ContactList","onDeleteContact","listStyle","map","id","onClick","ContactFilter","onSetFilter","initilState","App","useState","state","setState","useEffect","prev","JSON","parse","localStorage","getItem","handleSetName","target","className","e","preventDefault","contact","shortid","generate","el","alert","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6797f4b.chunk.js","sourcesContent":["function getFilteredContacts(contacts, filter) {\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase().trim()),\r\n  );\r\n}\r\n\r\nexport default getFilteredContacts;\r\n","import React from 'react'; //при закоментированом варианте нужно сюда дописать { Component }\r\n// import shortid from 'shortid';\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     tel: '',\r\n//   };\r\n//   nameInputId = shortid.generate();\r\n//   telInputId = shortid.generate();\r\n\r\n//   handleChange = event => {\r\n//     const { name, value } = event.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = event => {\r\n//     event.preventDefault();\r\n//     this.props.onSubmit(this.state);\r\n//     this.reset();\r\n//   };\r\n\r\n//   // formSubmitHandler = data => {\r\n//   //   console.log(data);\r\n//   // };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '', tel: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form onSubmit={this.handleSubmit} style={{ display: 'grid' }}>\r\n//         <label htmlFor={this.nameInputId} style={{ marginBottom: '10px' }}>\r\n//           Name\r\n//           <input\r\n//             value={this.state.name}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             placeholder=\"Enter contact name\"\r\n//             required\r\n//             onChange={this.handleChange}\r\n//             id={this.nameInputId}\r\n//           />\r\n//         </label>\r\n//         <label htmlFor={this.telInputId}>\r\n//           Phone\r\n//           <input\r\n//             value={this.state.tel}\r\n//             type=\"tel\"\r\n//             name=\"tel\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             placeholder=\"Enter contact phone\"\r\n//             required\r\n//             onChange={this.handleChange}\r\n//             id={this.telInputId}\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\" style={{ width: '300px' }}>\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\nconst ContactForm = ({ onSetName, onAddContact, name, number }) => (\r\n  <form style={{ display: 'grid' }} onSubmit={onAddContact}>\r\n    <label style={{ marginBottom: '10px' }}>\r\n      Name\r\n      <input\r\n        value={name}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        placeholder=\"Enter contact name\"\r\n        required\r\n        onInput={onSetName}\r\n        // onChange={options.handleChange}\r\n      />\r\n    </label>\r\n    <label>\r\n      Phone\r\n      <input\r\n        value={number}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        placeholder=\"Enter contact phone\"\r\n        required\r\n        onInput={onSetName}\r\n        // onChange={options.handleChange}\r\n      />\r\n    </label>\r\n    <button type=\"submit\">Отправить</button>\r\n  </form>\r\n);\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul style={{ listStyle: 'none' }}>\r\n    {contacts.map(({ name, number, id }) => (\r\n      <li key={id}>\r\n        <p>Name:{name}</p>\r\n        <p>Number:{number}</p>\r\n        <button id={id} onClick={onDeleteContact}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\n\r\nconst ContactFilter = ({ onSetFilter, filter }) => (\r\n  <>\r\n    <label>\r\n      <p>Search for contacts</p>\r\n      <input onInput={onSetFilter} type=\"text\" name=\"filter\" value={filter} />\r\n    </label>\r\n  </>\r\n);\r\n\r\nexport default ContactFilter;\r\n","import React from 'react'; //при закоментированом варианте нужно сюда дописать { Component }\r\nimport { useState, useEffect } from 'react';\r\n\r\n//libraries\r\nimport shortid from 'shortid';\r\n\r\n//helpers\r\nimport getFilteredContacts from './helpers/filterContacts';\r\n\r\n//Components\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport ContactFilter from './components/ContactFilter/ContactFilter';\r\n\r\nconst initilState = {\r\n  contacts: [],\r\n  name: '',\r\n  number: '',\r\n  filter: '',\r\n};\r\n\r\nfunction App() {\r\n  const [state, setState] = useState(initilState);\r\n\r\n  useEffect(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      contacts:\r\n        JSON.parse(localStorage.getItem('contacts')) !== null\r\n          ? JSON.parse(localStorage.getItem('contacts'))\r\n          : [],\r\n    }));\r\n  }, []);\r\n\r\n  //Метод, который в State записывает введенные name і number\r\n  const handleSetName = ({ target: { name, value } }) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  //Добавляем контакт в наш массив контактов\r\n  const handleAddContact = e => {\r\n    e.preventDefault();\r\n    const contact = {\r\n      name: state.name,\r\n      number: state.number,\r\n      id: shortid.generate(),\r\n    };\r\n    if (state.contacts.map(el => el.name).includes(state.name)) {\r\n      alert('Остановись, контакт с таким именем уже существует');\r\n      return;\r\n    }\r\n    localStorage.setItem(\r\n      'contacts',\r\n      JSON.stringify([...state.contacts, contact]),\r\n    );\r\n    setState(prev => ({\r\n      ...prev,\r\n      contacts: [...prev.contacts, contact],\r\n      name: '',\r\n      number: '',\r\n    }));\r\n  };\r\n\r\n  //Удаляем контакт из ContactList\r\n  const handleDeleteContact = ({ target: { id } }) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      contacts: state.contacts.filter(el => el.id !== id),\r\n    }));\r\n    localStorage.setItem(\r\n      'contacts',\r\n      JSON.stringify(state.contacts.filter(el => el.id !== id)),\r\n    );\r\n  };\r\n\r\n  //Делаем фильтр контактов\r\n  const contacts = getFilteredContacts(state.contacts, state.filter);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm\r\n        onSetName={handleSetName}\r\n        name={state.name}\r\n        number={state.number}\r\n        onAddContact={handleAddContact}\r\n        // onSubmit={this.formSubmit}\r\n        // input={this.state}\r\n        // options={this}\r\n        // optionsTel={this.handleTelChange}\r\n      />\r\n      <h2>Contacts</h2>\r\n      <ContactFilter onSetFilter={handleSetName} filter={state.filter} />\r\n      <ContactList contacts={contacts} onDeleteContact={handleDeleteContact} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Первый вариант\r\n// class App extends Component {\r\n//   state = {\r\n//     inputValue: '',\r\n//     name: '',\r\n//     tel: '',\r\n//   };\r\n\r\n//   // handleChange = event => {\r\n//   //   const { name, value } = event.currentTarget;\r\n//   //   this.setState({ [name]: value });\r\n//   // };\r\n\r\n//   // handleSubmit = event => {\r\n//   //   event.preventDefault();\r\n//   //   console.log(this.state);\r\n//   // };\r\n\r\n//   formSubmit = event => {\r\n//     console.log(event);\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm\r\n//           onSubmit={this.formSubmit}\r\n//           // input={this.state}\r\n//           // options={this}\r\n//           // optionsTel={this.handleTelChange}\r\n//         />\r\n//         <h2>Contacts</h2>\r\n//         {/* <Filter ... /> */}\r\n//         {/* <ContactList ... /> */}\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}